
apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    sourceSets {
        main.java.srcDirs = ['src/main/java','src/main/base']
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}
apply from: '../publish.gradle'

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    compile 'com.google.code.gson:gson:2.8.0'

    // testing
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.1.1'
    // https://mvnrepository.com/artifact/junit/junit
    testCompile 'junit:junit:4.12'

}

ext.versionRel = '0.1'
version = versionRel
ext.descriptionRel = 'Vectoroid SDK for Android - Base'
ext.projectDesc = ext.descriptionRel

bintray {
    pkg {
        name = build.project.name
        desc = descriptionRel
        version {
            desc = descriptionRel
            name = versionRel
            vcsTag = versionRel
            attributes = ['gradle-plugin': "$group:$build.project.name:$versionRel"]
        }
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                name projectDesc
            }
        }
    }
}


task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
}

task generateJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task generateJavadocsJar(type: Jar) {//, dependsOn: 'generateJavadocs'
    from generateJavadocs.destinationDir
    classifier 'javadoc'
}

//generateJavadocsJar.dependsOn generateJavadocs

//configurations {
    artifacts {
        archives generateSourcesJar
        //archives generateJavaDocsJar

    }
//}