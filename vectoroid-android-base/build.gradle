
apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'
// apply plugin: 'maven-publish'

android {
    compileSdkVersion 29
    buildToolsVersion "28.0.3"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    lintOptions {// todo remove and fix lint errors
        abortOnError false
    }

    sourceSets {
        main.java.srcDirs = ['src/main/java','src/main/base']
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}
apply from: '../publish.gradle'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation 'com.google.code.gson:gson:2.8.5'

    // testing
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'com.android.support:appcompat-v7:28.0.0'
    // https://mvnrepository.com/artifact/junit/junit
    testImplementation 'junit:junit:4.12'

}

ext.versionRel = '0.1.3'
version = versionRel
ext.descriptionRel = 'Vectoroid SDK for Android - Base'
ext.projectDesc = ext.descriptionRel

bintray {
    pkg {
        name = build.project.name
        desc = descriptionRel
        version {
            desc = descriptionRel
            name = versionRel
            vcsTag = versionRel
            attributes = ['gradle-plugin': "$group:$build.project.name:$versionRel"]
        }
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                name projectDesc
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
// todo uncomment - should work
//task javadoc(type: Javadoc) {
//    source = android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//    failOnError false // TODO fix javadoc
//}
//
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}
artifacts {
//    archives javadocJar
    archives sourcesJar
}

//task findConventions << {
//    println project.getConvention()
//}
